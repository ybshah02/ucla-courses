{"ast":null,"code":"var _jsxFileName = \"/Users/yash/Desktop/chorus-lapilli/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      pickedpos: -1,\n      lastpos: -1,\n      msg: \"\"\n    };\n  }\n\n  handleClick(i) {\n    // store history, current board, and it's squares in temporary instances\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); // determine which player's move is next\n\n    const player = this.state.xIsNext ? \"X\" : \"O\"; // determine if winner already\n\n    if (calculateWinner(squares)) {\n      return;\n    } // first six moves is a tic tac toe gamne\n\n\n    if (this.state.stepNumber < 6) {\n      // if space is free\n      if (!squares[i]) {\n        // set player mark in tile\n        squares[i] = player; //add move to history and store steps, change move, and store last position\n\n        this.setState({\n          history: history.concat([{\n            squares: squares\n          }]),\n          stepNumber: history.length,\n          xIsNext: !this.state.xIsNext,\n          lastpos: i\n        });\n      } // confer to chorus lapilli rules\n\n    } else {\n      // check if center is occupied by player\n      if (squares[4] === player) {\n        // if occupied, change player move to pickup center\n        i = 4;\n      } // if picked up position is the player's tile\n\n\n      if (squares[i] === player) {\n        // set tile to null\n        squares[i] = null; // update history array by deleting tile space\n\n        let updatedHistory = history;\n        updatedHistory.pop();\n        updatedHistory.push({\n          squares: squares\n        });\n        this.setState({\n          history: updatedHistory,\n          pickedpos: i,\n          lastpos: i\n        });\n      } else {\n        if (this.state.pickedpos !== -1 && this.state.lastpos !== i) {\n          if (isAdj(this.state.pickedpos, i)) {\n            squares[i] = player;\n            this.setState({\n              history: history.concat([{\n                squares: squares\n              }]),\n              stepNumber: history.length,\n              xIsNext: !this.state.xIsNext,\n              pickedpos: -1,\n              lastpos: i\n            });\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const msg = this.state.msg;\n    let status;\n\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this);\n  }\n\n} // ========================================\n\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isAdj(pickedpos, placedpos) {\n  const adj = [[1, 3, 4], [0, 2, 3, 4, 5], [1, 4, 5], [0, 1, 4, 6, 7], [0, 1, 2, 3, 5, 6, 7, 8], [1, 2, 4, 7, 8], [3, 4, 7], [3, 4, 5, 6, 8], [4, 5, 7]];\n  const row = adj[pickedpos];\n\n  for (const elem in row) {\n    if (row[elem] === placedpos) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 210,\n  columnNumber: 5\n}, this), document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/yash/Desktop/chorus-lapilli/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","pickedpos","lastpos","msg","handleClick","slice","current","length","player","calculateWinner","setState","concat","updatedHistory","pop","push","isAdj","winner","status","lines","a","b","c","placedpos","adj","row","elem","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n}\n  \nclass Board extends React.Component {\n    renderSquare(i) {\n      return (\n        <Square\n          value={this.props.squares[i]}\n          onClick={() => this.props.onClick(i)}\n        />\n        );\n    }   \n  \n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n  \nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null)\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            pickedpos: -1,\n            lastpos: -1,\n            msg: \"\",\n        };\n    }\n\n    handleClick(i) {\n        // store history, current board, and it's squares in temporary instances\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        // determine which player's move is next\n        const player = this.state.xIsNext ? \"X\" : \"O\";\n\n        // determine if winner already\n        if (calculateWinner(squares)) {\n            return;\n        }\n\n        // first six moves is a tic tac toe gamne\n        if (this.state.stepNumber < 6){\n            // if space is free\n            if(!squares[i]){\n                // set player mark in tile\n                squares[i] = player;\n                //add move to history and store steps, change move, and store last position\n                this.setState({\n                    history: history.concat([\n                        {\n                        squares: squares\n                        }\n                    ]),\n                    stepNumber: history.length,\n                    xIsNext: !this.state.xIsNext,\n                    lastpos: i,\n                });\n            }\n        // confer to chorus lapilli rules\n        } else {\n            // check if center is occupied by player\n            if (squares[4] === player){\n                // if occupied, change player move to pickup center\n                i = 4;\n            }\n\n            // if picked up position is the player's tile\n            if (squares[i] === player){\n                // set tile to null\n                squares[i] = null;\n                // update history array by deleting tile space\n                let updatedHistory = history;\n                updatedHistory.pop();\n                updatedHistory.push({squares: squares});\n                this.setState({\n                    history: updatedHistory,\n                    pickedpos: i,\n                    lastpos: i,\n                });\n        } else {\n            if (this.state.pickedpos !== -1 && this.state.lastpos !== i){\n                if(isAdj(this.state.pickedpos,i)){\n                    squares[i] = player;\n                    this.setState({\n                        history: history.concat([\n                            {\n                            squares: squares\n                            }\n                        ]),\n                        stepNumber: history.length,\n                        xIsNext: !this.state.xIsNext,\n                        pickedpos: -1,\n                        lastpos: i,\n                        });\n                    }\n                }\n            }\n        }\n    }\n  \n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const msg = this.state.msg;\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        } \n  \n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                    />\n                </div>\n            <div className=\"game-info\">\n            <div>{status}</div>\n            <div>{msg}</div></div>\n            </div>\n        );\n    }\n}\n  \n// ========================================\n  \nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nfunction isAdj(pickedpos, placedpos) {\n    const adj = [\n        [1, 3, 4],\n        [0, 2, 3, 4, 5],\n        [1, 4, 5],\n        [0, 1, 4, 6, 7],\n        [0, 1, 2, 3, 5, 6, 7, 8],\n        [1, 2, 4, 7, 8],\n        [3, 4, 7],\n        [3, 4, 5, 6, 8],\n        [4, 5, 7],\n    ];\n\n    const row = adj[pickedpos];\n    for (const elem in row){\n        if (row[elem] === placedpos) {\n            return true;\n        }\n    }\n    return false;\n}\n\nReactDOM.render(\n    <Game />, \n    document.getElementById(\"root\")\n);"]},"metadata":{},"sourceType":"module"}