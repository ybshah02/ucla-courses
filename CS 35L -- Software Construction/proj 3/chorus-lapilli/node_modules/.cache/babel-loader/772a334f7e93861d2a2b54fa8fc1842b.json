{"ast":null,"code":"var _jsxFileName = \"/Users/yash/Desktop/chorus-lapilli/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      pickupSquare: -1,\n      // -1 if there is no square selected\n      // or square id if square is selected for grain remove\n      centerPlayed: false,\n      centerX: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const player = this.state.xIsNext ? \"X\" : \"O\";\n\n    if (calculateWinner(squares)) {\n      return;\n    }\n\n    if (this.state.stepNumber < 6 && !squares[i]) {\n      squares[i] = player;\n      this.setState({\n        history: history.concat([{\n          squares: squares\n        }]),\n        stepNumber: history.length,\n        xIsNext: !this.state.xIsNext\n      });\n    } else {\n      if (squares[i] === player) {\n        console.log(\"yay\");\n      }\n    }\n    /*\n    if (this.state.centerPlayed && ((this.state.xIsNext && this.state.centerX) || (!this.state.xIsNext && !this.state.centerX))) {\n        if(this.state.pickupSquare === -1) {    // if no square has been picked\n            if((squares[i] === \"X\" && this.state.xIsNext) || (squares[i] === \"O\" && !this.state.xIsNext)) {\n                this.setState({\n                    pickupSquare: i,\n                });\n            }\n        }\n        // if picked\n        else {\n            if(checkAdjacent(this.state.pickupSquare, i)) {\n                var temp = Array(9).fill(null);\n                for(var x = 0; x < squares.length; x++) {\n                    temp[x] = squares[x];\n                }\n                temp[i] = this.state.xIsNext ? \"X\" : \"O\";\n                temp[this.state.pickupSquare] = null;\n                if(calculateWinner(temp) || this.state.pickupSquare === 4) {\n                    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n                    squares[this.state.pickupSquare] = null;\n                    this.setState({\n                        history: history.concat([\n                            {\n                                squares: squares\n                            }\n                        ]),\n                        stepNumber: history.length,\n                        xIsNext: !this.state.xIsNext,\n                        pickupSquare: -1,\n                        centerPlayed: false,\n                    });\n                }\n                else {\n                    this.setState({\n                        pickupSquare: -1,\n                    })\n                }\n            }\n        }\n    }\n    else {\n        if (this.state.stepNumber < 6) {\n            if (!squares[i]) {\n                squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n                this.setState({\n                    history: history.concat([\n                    {\n                        squares: squares\n                    }\n                    ]),\n                    stepNumber: history.length,\n                    xIsNext: !this.state.xIsNext,\n                });\n            }\n        }\n        else {  // if more than six steps\n            // if not picked yet\n            if(this.state.pickupSquare === -1) {\n                if((squares[i] === \"X\" && this.state.xIsNext) || (squares[i] === \"O\" && !this.state.xIsNext)) {\n                    this.setState({\n                        pickupSquare: i,\n                    });\n                }\n            }\n            // if picked\n            else {\n                if(checkAdjacent(this.state.pickupSquare, i)) {\n                    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n                    squares[this.state.pickupSquare] = null;\n                    this.setState({\n                        history: history.concat([\n                            {\n                                squares: squares\n                            }\n                        ]),\n                        stepNumber: history.length,\n                        centerX: i === 4 ? this.state.xIsNext : this.state.centerX,\n                        xIsNext: !this.state.xIsNext,\n                        pickupSquare: -1,\n                        centerPlayed: i === 4 ? true : this.state.centerPlayed,\n                    });\n                }\n            }\n        }\n    }\n    */\n\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 227,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n\nfunction checkAdjacent(pickUp, placeDown) {\n  const adjacent = [[1, 3, 4], [0, 2, 3, 4, 5], [1, 4, 5], [0, 1, 4, 6, 7], [0, 1, 2, 3, 5, 6, 7, 8], [1, 2, 4, 7, 8], [3, 4, 7], [3, 4, 5, 6, 8], [4, 5, 7]];\n\n  for (let i = 0; i < adjacent[pickUp].length; i++) {\n    if (adjacent[pickUp][i] === placeDown) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/yash/Desktop/chorus-lapilli/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","pickupSquare","centerPlayed","centerX","handleClick","slice","current","length","player","calculateWinner","setState","concat","console","log","jumpTo","step","winner","moves","map","move","desc","status","document","getElementById","checkAdjacent","pickUp","placeDown","adjacent","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n}\n  \nclass Board extends React.Component {\n    renderSquare(i) {\n      return (\n        <Square\n          value={this.props.squares[i]}\n          onClick={() => this.props.onClick(i)}\n        />\n        );\n    }   \n  \n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n  \nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null)\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            pickupSquare: -1,   // -1 if there is no square selected\n                                // or square id if square is selected for grain remove\n            centerPlayed: false,\n            centerX: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        const player = this.state.xIsNext ? \"X\" : \"O\";\n\n        if (calculateWinner(squares)) {\n            return;\n        }\n        if (this.state.stepNumber < 6 && !squares[i]){\n          squares[i] = player;\n          this.setState({\n            history: history.concat([\n              {\n                squares: squares\n              }\n              ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n          });\n        }else {\n          if (squares[i] === player){\n            console.log(\"yay\");\n          }\n        }\n        /*\n        if (this.state.centerPlayed && ((this.state.xIsNext && this.state.centerX) || (!this.state.xIsNext && !this.state.centerX))) {\n            if(this.state.pickupSquare === -1) {    // if no square has been picked\n                if((squares[i] === \"X\" && this.state.xIsNext) || (squares[i] === \"O\" && !this.state.xIsNext)) {\n                    this.setState({\n                        pickupSquare: i,\n                    });\n                }\n            }\n            // if picked\n            else {\n                if(checkAdjacent(this.state.pickupSquare, i)) {\n                    var temp = Array(9).fill(null);\n                    for(var x = 0; x < squares.length; x++) {\n                        temp[x] = squares[x];\n                    }\n                    temp[i] = this.state.xIsNext ? \"X\" : \"O\";\n                    temp[this.state.pickupSquare] = null;\n                    if(calculateWinner(temp) || this.state.pickupSquare === 4) {\n                        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n                        squares[this.state.pickupSquare] = null;\n                        this.setState({\n                            history: history.concat([\n                                {\n                                    squares: squares\n                                }\n                            ]),\n                            stepNumber: history.length,\n                            xIsNext: !this.state.xIsNext,\n                            pickupSquare: -1,\n                            centerPlayed: false,\n                        });\n                    }\n                    else {\n                        this.setState({\n                            pickupSquare: -1,\n                        })\n                    }\n                }\n            }\n        }\n        else {\n            if (this.state.stepNumber < 6) {\n                if (!squares[i]) {\n                    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n                    this.setState({\n                        history: history.concat([\n                        {\n                            squares: squares\n                        }\n                        ]),\n                        stepNumber: history.length,\n                        xIsNext: !this.state.xIsNext,\n                    });\n                }\n            }\n            else {  // if more than six steps\n                // if not picked yet\n                if(this.state.pickupSquare === -1) {\n                    if((squares[i] === \"X\" && this.state.xIsNext) || (squares[i] === \"O\" && !this.state.xIsNext)) {\n                        this.setState({\n                            pickupSquare: i,\n                        });\n                    }\n                }\n                // if picked\n                else {\n                    if(checkAdjacent(this.state.pickupSquare, i)) {\n                        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n                        squares[this.state.pickupSquare] = null;\n                        this.setState({\n                            history: history.concat([\n                                {\n                                    squares: squares\n                                }\n                            ]),\n                            stepNumber: history.length,\n                            centerX: i === 4 ? this.state.xIsNext : this.state.centerX,\n                            xIsNext: !this.state.xIsNext,\n                            pickupSquare: -1,\n                            centerPlayed: i === 4 ? true : this.state.centerPlayed,\n                        });\n                    }\n                }\n            }\n        }\n        */\n    }\n  \n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n  \n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n  \n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n  \n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        } \n  \n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                    />\n                </div>\n            <div className=\"game-info\">\n            <div>{status}</div>\n                <ol>{moves}</ol>\n            </div>\n            </div>\n        );\n    }\n}\n  \n// ========================================\n  \nReactDOM.render(<Game />, document.getElementById(\"root\"));\n  \nfunction checkAdjacent(pickUp, placeDown) {\n    const adjacent = [\n        [1, 3, 4],\n        [0, 2, 3, 4, 5],\n        [1, 4, 5],\n        [0, 1, 4, 6, 7],\n        [0, 1, 2, 3, 5, 6, 7, 8],\n        [1, 2, 4, 7, 8],\n        [3, 4, 7],\n        [3, 4, 5, 6, 8],\n        [4, 5, 7] \n    ];\n    for(let i = 0; i < adjacent[pickUp].length; i++) {\n        if (adjacent[pickUp][i] === placeDown) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}"]},"metadata":{},"sourceType":"module"}